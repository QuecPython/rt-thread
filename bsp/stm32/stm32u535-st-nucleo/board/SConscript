import os
import rtconfig
from building import *

Import('SDK_LIB')

cwd = GetCurrentDir()

# add general drivers
src = Split('''
board.c
CubeMX_Config/Src/stm32u5xx_hal_msp.c
''')

# if GetDepend(['BSP_USING_KEY']):
#     src += Glob('ports/drv_key.c')

# if GetDepend(['BSP_USING_SPI_FLASH']):
#     src += Glob('ports/drv_spi_flash.c')

if GetDepend(["BSP_USING_NAND_FLASH"]):
    src += Glob("nand_flash/*.c")

path = [cwd]
path += [cwd + '/CubeMX_Config/Inc']
if GetDepend(["BSP_USING_NAND_FLASH"]):
    path += [cwd + '/nand_flash']

startup_path_prefix = SDK_LIB

if rtconfig.PLATFORM in ['gcc']:
    if GetDepend(["SOC_STM32U535VE"]):
        src += [startup_path_prefix + '/STM32U5xx_HAL/CMSIS/Device/ST/STM32U5xx/Source/Templates/gcc/startup_stm32u535xx.s']
    else:
        src += [startup_path_prefix + '/STM32U5xx_HAL/CMSIS/Device/ST/STM32U5xx/Source/Templates/gcc/startup_stm32u545xx.s']
elif rtconfig.PLATFORM in ['armcc', 'armclang']:
    if GetDepend(["SOC_STM32U535VE"]):
        src += [startup_path_prefix + '/STM32U5xx_HAL/CMSIS/Device/ST/STM32U5xx/Source/Templates/arm/startup_stm32u535xx.s']
    else:
        src += [startup_path_prefix + '/STM32U5xx_HAL/CMSIS/Device/ST/STM32U5xx/Source/Templates/arm/startup_stm32u545xx.s']
elif rtconfig.PLATFORM in ['iccarm']:
    if GetDepend(["SOC_STM32U535VE"]):
        src += [startup_path_prefix + '/STM32U5xx_HAL/CMSIS/Device/ST/STM32U5xx/Source/Templates/iar/startup_stm32u535xx.s']
    else:
        src += [startup_path_prefix + '/STM32U5xx_HAL/CMSIS/Device/ST/STM32U5xx/Source/Templates/iar/startup_stm32u545xx.s']

# You can select chips from the list above
if GetDepend(["SOC_STM32U535VE"]):
    CPPDEFINES = ['STM32U535xx']
else:
    CPPDEFINES = ['STM32U545xx']
group = DefineGroup('Drivers', src, depend = [''], CPPPATH = path, CPPDEFINES = CPPDEFINES)

Return('group')
